#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2014-2015 Marin Atanasov Nikolov <dnaeon@gmail.com>
# Copyright (c) 2015-2016 <dav3860chom@yahoo.fr>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
The vmbix-object-sync tool is used for importing VMware vSphere objects
into a Zabbix server as regular Zabbix hosts

"""

from copy import deepcopy
import yaml
import zabbix_api
import json
import re
from docopt import docopt
import smtplib
import logging
import socket
import struct


class ZGet:
  """
  Zabbix Get class

  Implements the zabbix_get tool in Python

  """
  def __init__(self, host, port):
    self.host = host
    self.port = port
    #self.key = ""

  def str2packed(self, data):
      header_field =  struct.pack('<4sBQ', 'ZBXD', 1, len(data))
      return header_field + data

  def packed2str(self, packed_data):
      header, version, length = struct.unpack('<4sBQ', packed_data[:13])
      (data, ) = struct.unpack('<%ds'%length, packed_data[13:13+length])
      return data

  def get(self, key):
      key = key + "\n"
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.connect((self.host, self.port))
      s.sendall(self.str2packed(key))

      data = ''
      while True:
          buff = s.recv(1024)
          if not buff:
              break
          data += buff

      if data.startswith('ZBXD\x01'):
        response = self.packed2str(data)
      else:
        response = data

      s.close()
      return response


class ZabbixException(Exception):
    """
    Generic exception

    """
    pass

class ZabbixConnector(object):
    """
    Zabbix connector class

    Defines methods for connecting to a Zabbix server and
    importing of vSphere objects as regular Zabbix hosts

    """
    def __init__(self, options):
        self.options = options

    def connect(self):
        """
        Establishes a connection to the Zabbix server

        """
        logging.info('Connecting to Zabbix server at %s', self.options['zabbix']['hostname'])

        self.conn = zabbix_api.ZabbixAPI(server=self.options['zabbix']['hostname'])

        try:
            self.conn.login(
                user=self.options['zabbix']['username'],
                password=self.options['zabbix']['password']
            )
        except zabbix_api.ZabbixAPIException as e:
            logging.error('Cannot login to Zabbix server: %s', e)
            raise ZabbixException, 'Cannot login to Zabbix server: %s' % e

    def get_hosts(self):
        """
        Get all hosts registered in Zabbix

        """
        result = self._call_zabbix_method(
            method='host.get',
            params={'output': 'extend'}
        )

        return result

    def get_host(self, name):
        """
        Get host registered in Zabbix by name

        """
        data   = self.get_hosts()
        hosts  = data['result']

        for host in hosts:
            if host['host'] == name:
                break
        else:
            return None

        return host


    def get_hosts_by_group(self, groups):
        """
        Get all hosts in specific groups

        """
        groupids = []
        for group in groups:
            groupid = self.get_host_group_by_name(group)
            if groupid:
                groupids.extend(groupid)
        if groupids:
            result = self._call_zabbix_method(
                method='host.get',
                params={'output': 'extend', 'groupids': groupids}
            )

        return result

    def get_proxy_hosts(self):
        """
        Gets all Zabbix Proxy hosts

        """
        result = self._call_zabbix_method(
            method='proxy.get',
            params={'output': 'extend'}
        )

        return result

    def get_hostid_by_name(self, name):
        """
        Get a Zabbix host id by name

        Args:
            name (str): Name of the host in Zabbix

        Returns:
            The id of the host in Zabbix

        """
        data   = self.get_hosts()
        hosts  = data['result']

        for host in hosts:
            if host['host'] == name:
                break
        else:
            return None

        return host['hostid']

    def get_proxy_host_by_name(self, name):
        """
        Get a Zabbix Proxy host id by name

        Args:
            name (str): Name of the Proxy host in Zabbix

        Returns:
            The id of the Proxy host in Zabbix

        """
        data   = self.get_proxy_hosts()
        hosts  = data['result']

        for host in hosts:
            if host['host'] == name:
                break
        else:
            return None

        return host['proxyid']

    def get_templates(self):
        """
        Gets all Zabbix templates

        """
        result = self._call_zabbix_method(
            method='template.get',
            params={'output': 'extend'}
        )

        return result

    def get_template_by_name(self, name):
        """
        Get a template id by name

        Args:
            name (str): Name of the template in Zabbix

        Returns:
            The id of the template

        """
        data      = self.get_templates()
        templates = data['result']

        for template in templates:
            if template['name'] == name:
                break
        else:
            return None

        return template['templateid']

    def get_host_groups(self):
        """
        Gets all Zabbix host groups

        """
        result = self._call_zabbix_method(
            method='hostgroup.get',
            params={'output': 'extend'}
        )

        return result

    def get_host_group_by_name(self, name):
        """
        Get a Zabbix hostgroup id by name

        Args:
            name (str): Name of the host group in Zabbix

        Returns:
            The id of the host group in Zabbix

        """
        data   = self.get_host_groups()
        groups = data['result']

        for group in groups:
            if group['name'] == name:
                break
        else:
            return None

        return group['groupid']

    def create_host_group(self, name):
        """
        Create a Zabbix host group

        Args:
            name (str): Name of the host group to create

        Returns:
            The id of the newly create host group

        """
        result = self._call_zabbix_method(
            method='hostgroup.create',
            params={'name': name}
        )

        return result['result']['groupids']

    def create_host(self, params):
        """
        Create a Zabbix host

        Args:
            host (str): Hostname of the Zabbix host to create

        """
        result = self._call_zabbix_method(
            method='host.create',
            params=params
        )

        return result

    def _get_zabbix_host_options(self, name):
        """
        Helper method to simplify the retrieving of host
        options from the config file.

        Options which are retrieved and returned include
        the host templates, groups and user defined macros

        Args:
            name (str): Name of the entry from config file to lookup

        Returns:
            A dict containing the host options from the config file

        """
        if not self.options['zabbix'].has_key(name):
            logging.warning("[%s] There is no '%s' entry in the config file", name, name)
            #raise ZabbixException, "There is no '%s' entry in the config file" % name
            return

        # Get the Zabbix Proxy if set
        proxy_id = None
        if self.options['zabbix'][name].has_key('proxy'):
            proxy_name = self.options['zabbix'][name]['proxy']
            proxy_id = self.get_proxy_host_by_name(proxy_name)
            if not proxy_id:
                logging.warning("[%s] Unable to find Zabbix proxy '%s'", name, proxy_name)
                raise ZabbixException, "Unable to find Zabbix proxy '%s'" % proxy_name

        # Get ids of the Zabbix templates
        if not self.options['zabbix'][name].has_key('templates'):
            logging.warning("[%s] No templates are defined for '%s' config entry", name, name)
            raise ZabbixException, "No templates are defined for '%s' config entry" % name

        templates = []
        for template in self.options['zabbix'][name]['templates']:
            template_id = self.get_template_by_name(template)
            if not template_id:
                logging.warning("[%s] Template '%s' was not found on the Zabbix server", name, template)
                continue
            templates.append({ 'templateid': template_id })

        # Get ids of the Zabbix hostgroups
        if not self.options['zabbix'][name].has_key('groups'):
            logging.warning("[%s] No groups are defined for '%s' config entry", name, name)
            raise ZabbixException, "No groups are defined for '%s' config entry" % name

        groups = []
        for group in self.options['zabbix'][name]['groups']:
            group_id = self.get_host_group_by_name(group)
            if not group_id:
                logging.warning("[%s] Unable to find Zabbix host group '%s'", name, group)
                logging.info("[%s] Creating Zabbix host group '%s'", name, group)
                result = self.create_host_group(name=group)
                group_id = result[0]
            groups.append({ 'groupid': group_id })

        # At least one group must be defined
        if not groups:
            logging.warning("[%s] No valid groups found for '%s' config entry", name, name)
            raise ZabbixException, "No valid groups found for '%s' config entry" % name

        # The host skeleton
        r = {
            'proxy_hostid': proxy_id,
            'templates': templates,
            'groups': groups,
        }

        # Optional groups
        if self.options['zabbix'][name].has_key('optional_groups'):
          optional_groups = []
          for test in self.options['zabbix'][name]['optional_groups']:
              group_id = self.get_host_group_by_name(test['value'])
              if not group_id:
                  logging.warning("[%s] Unable to find Zabbix host group '%s'", name, test['value'])
                  logging.info("[%s] Creating Zabbix host group '%s'", name, test['value'])
                  result = self.create_host_group(name=test['value'])
                  group_id = result[0]
              optional_groups.append({'method': test['method'], 'pattern': test['pattern'], 'value': group_id})
          r['optional_groups'] = optional_groups

        # Optional templates
        if self.options['zabbix'][name].has_key('optional_templates'):
          optional_templates = []
          for test in self.options['zabbix'][name]['optional_templates']:
              template_id = self.get_template_by_name(test['value'])
              if not template_id:
                  logging.warning("[%s] Template '%s' was not found on the Zabbix server", name, template)
                  continue
              optional_templates.append({'method': test['method'], 'pattern': test['pattern'], 'value': template_id})
          r['optional_templates'] = optional_templates

        # Get conditions to include the host
        if self.options['zabbix'][name].has_key('include'):
          r['include'] = self.options['zabbix'][name]['include']

        # Get conditions to exclude the host
        if self.options['zabbix'][name].has_key('exclude'):
          r['exclude'] = self.options['zabbix'][name]['exclude']

        # Get macros if any
        macros = []
        if self.options['zabbix'][name].has_key('macros'):
            for name, value in self.options['zabbix'][name]['macros'].items():
                # Convert macro names to Zabbix format -> {$MACRO}
                m = {}
                m['macro'] = '{$' + name + '}'
                m['value'] = value
                macros.append(m)
            r['macros'] = macros

        return r

    def _call_zabbix_method(self, method, params):
        """
        Helper method for calling Zabbix API methods

        Args:
            method  (str): Zabbix API method
            params (dict): Additional method params

        Returns:
            Result from calling the Zabbix API method

        """
        req = self.conn.json_obj(method=method, params=params)
        result = self.conn.do_request(req)

        return result

    def import_vsphere_hosts(self, type):
        """
        Import vSphere hosts into Zabbix as regular Zabbix hosts

        Args:
            type (str): The type of object to import (VM, ESX, datastore)

        """
        logging.info('[%s] Importing objects of type [%s] into Zabbix', type, type)

        # Get hosts options (templates, groups, macros) from the config file
        host_options = self._get_zabbix_host_options(type)
        if not host_options:
          return

        zabbix_data  = self.get_hosts()
        zabbix_hosts  = [host['host'] for host in zabbix_data['result']] # keep the host "technical name"

        # Get host list from VMBIX
        zg = ZGet(host = self.options['vmbix']['hostname'], port = self.options['vmbix']['port'])

        if type == 'vsphere_object_vm': # for VMs
          data = zg.get("vm.discovery[*]")

          try:
            vsphere_data = json.loads(data)
          except:
            print "Cannot decode VmBix response"
            logging.error("[%s] Cannot decode VmBix response", type)
            exit(1)

          if self.options['vmbix']['useuuid'] == 1:
            self.vsphere_hosts[type] = {host['{#UUID}']: host['{#VIRTUALMACHINE}'] for host in vsphere_data['data']}
          else:
            self.vsphere_hosts[type] = {host['{#VIRTUALMACHINE}']: host['{#VIRTUALMACHINE}'] for host in vsphere_data['data']}
        elif type == 'vsphere_object_esx': # ESXs
          data = zg.get("esx.discovery[*]")

          try:
            vsphere_data = json.loads(data)
          except:
            print "Cannot decode VmBix response"
            logging.error("[%s] Cannot decode VmBix response", type)
            exit(1)

          if self.options['vmbix']['useuuid'] == 1:
            self.vsphere_hosts[type] = {host['{#UUID}']: host['{#ESXHOST}'] for host in vsphere_data['data']}
          else:
            self.vsphere_hosts[type] = {host['{#ESXHOST}']: host['{#ESXHOST}'] for host in vsphere_data['data']}
        elif type == 'vsphere_object_datastore': # datastores
          data = zg.get("datastore.discovery[*]")

          try:
            vsphere_data = json.loads(data)
          except:
            print "Cannot decode VmBix response"
            logging.error("[%s] Cannot decode VmBix response", type)
            exit(1)

          if self.options['vmbix']['useuuid'] == 1:
            self.vsphere_hosts[type] = {host['{#UUID}']: host['{#DATASTORE}'] for host in vsphere_data['data']}
          else:
            self.vsphere_hosts[type] = {host['{#DATASTORE}']: host['{#DATASTORE}'] for host in vsphere_data['data']}

        # Identify the hosts that are not in Zabbix
        missing_hosts = set(self.vsphere_hosts[type].keys()) - set(zabbix_hosts)

        if not missing_hosts:
            logging.info('[%s] Objects are in sync with Zabbix', type)
            return

        logging.info('[%s] Number of objects to be checked: %d', type, len(missing_hosts))

        # Add a default interface for the host
        host_options['interfaces'] = [
            {
                'type': 1,
                'main': 1,
                'useip': 0,
                'ip': '',
                'dns': '',
                'port': '10050'
            }
        ]

        # Create the hosts in Zabbix if they match the rules
        i = 0
        for host in missing_hosts:
            i = i + 1

            name = self.vsphere_hosts[type][host].encode('utf-8')
            host = host.encode('utf-8')

            params = deepcopy(host_options)
            if self.options['vmbix']['useuuid'] == 1:
              params['host'] = host
              params['name'] = name
            else:
              params['host'] = host

            logging.debug("[%s] Processing host '%s' [%s/%s]", type, name, i, len(missing_hosts))

            # Check if host should be included
            logging.debug("[%s] Checking inclusion rules for host '%s'", type, name)
            if params.has_key('include'):
              try:
                for test in params['include']:
                  result = zg.get("%s[%s]" % (test['method'], host))
                  reg = re.compile(".*%s.*" % test['pattern'], re.IGNORECASE)
                  if not reg.match(result):
                    logging.debug("[%s] Host '%s' did not match inclusion rule '%s'", type, name, test)
                    raise ZabbixException
              except ZabbixException:
                logging.debug("[%s] Host '%s' was not included due to conditional filter", type, name)
                continue

              del params['include']

            # Check if the host should be skipped
            logging.debug("[%s] Checking exclusion rules for host '%s'", type, name)
            if params.has_key('exclude'):
              try:
                for test in params['exclude']:
                  result = zg.get("%s[%s]" % (test['method'], host))
                  reg = re.compile(".*%s.*" % test['pattern'], re.IGNORECASE)
                  if reg.match(result):
                    logging.debug("[%s] Host '%s' matched exclusion rule '%s'", type, name, test)
                    raise ZabbixException
              except ZabbixException:
                logging.debug("[%s] Host '%s' was excluded due to conditional filter ", type, name)
                continue

              del params['exclude']

            # Checking if the hostname property can be retrieved
            params['interfaces'][0]['dns'] = name
            if type == 'vsphere_object_vm':
              hostname = zg.get("vm.guest.name[%s]" % host)
              # Check if the hostname is valid
              if hostname and hostname != "null" and not hostname.startswith("ZBX_NOTSUPPORTED"):
                logging.debug("[%s] Using hostname for host '%s'", type, name)
                params['interfaces'][0]['dns'] = hostname

            # Checking optional groups
            logging.debug("[%s] Checking group rules for host '%s'", type, name)
            if params.has_key('optional_groups'):
              for test in params['optional_groups']:
                result = zg.get("%s[%s]" % (test['method'], host))
                reg = re.compile(".*%s.*" % test['pattern'], re.IGNORECASE)
                if reg.match(result):
                  logging.debug("[%s] Host '%s' matched group rule '%s'", type, name, test)
                  params['groups'].append({'groupid': test['value']})

              del params['optional_groups']

            # Checking optional templates
            logging.debug("[%s] Checking template rules for host '%s'", type, name)
            if params.has_key('optional_templates'):
              for test in params['optional_templates']:
                result = zg.get("%s[%s]" % (test['method'], host))
                reg = re.compile(".*%s.*" % test['pattern'], re.IGNORECASE)
                if reg.match(result):
                  logging.debug("[%s] Host '%s' matched template rule '%s'", type, name, test)
                  params['templates'].append({'templateid': test['value']})

              del params['optional_templates']

            # Try to create the host in Zabbix
            logging.info("[%s] Creating Zabbix host '%s'", type, name)
            try:
              result = self.create_host(params)
              self.added_hosts.append(name)
            except zabbix_api.ZabbixAPIException as e:
              logging.warning('[%s] Cannot create host in Zabbix: %s', type, e)

        logging.info('Import of objects completed')

    def check_for_extra_hosts(self, type):
        """
        Check for extra hosts in Zabbix which are no longer in vSphere

        Searching for extra hosts which are found in Zabbix, but are no longer
        present on the vSphere host.

        Args:
            type (string): The type of object to import (VM, ESX, datastore)

        """
        logging.info(
            'Searching for extra hosts in Zabbix of type [%s], which are no longer present in vSphere', type)

        if not self.vsphere_hosts.has_key(type) or not self.vsphere_hosts.has_key(type):
          logging.warning('[%s] No object found in vSphere : skipping', type)
          return

        # Get hosts options (templates, type, groups, macros) from the config file
        host_options = self._get_zabbix_host_options(type)
        if not host_options:
          return

        zabbix_data  = self.get_hosts_by_group(self.options['zabbix'][type]['groups'])
        zabbix_hosts  = {host['host']:host['name'] for host in zabbix_data['result']}

        # Number of hosts in Zabbix but not in vCenter
        extra_hosts = set(zabbix_hosts.keys()) - set(self.vsphere_hosts[type].keys())
        logging.info('[%s] Number of extra hosts in Zabbix : %d', type, len(extra_hosts))

        zg = ZGet(host = self.options['vmbix']['hostname'], port = self.options['vmbix']['port'])

        # Evaluate the conditional filters for all remaining hosts in Zabbix
        logging.info(
            '[%s] Checking conditional filters against the remaining hosts at %s', type, 
            self.options['vmbix']['hostname']
        )

        common_hosts = set(zabbix_hosts.keys()) & set(self.vsphere_hosts[type].keys())
        logging.debug("[%s] Number of common hosts in Zabbix and vSphere : %s", type, len(common_hosts))

        # Check if the already monitored hosts still match the conditions
        i = 0
        for vm in common_hosts:
            i = i + 1

            name = self.vsphere_hosts[type][vm].encode('utf-8')
            vm = vm.encode('utf-8')
            params = deepcopy(host_options)
            params['host'] = vm

            logging.debug("[%s] Processing host '%s' [%s/%s]", type, name, i, len(common_hosts))

            # Check if the host should be included
            logging.debug("[%s] Checking inclusion rules for host '%s'", type, name)
            if params.has_key('include'):
              try:
                for test in params['include']:
                  if test['method'] != "vm.powerstate": # don't check for powered-off hosts
                    result = zg.get("%s[%s]" % (test['method'], vm))
                    reg = re.compile(".*%s.*" % test['pattern'], re.IGNORECASE)
                    if not reg.match(result):
                      logging.debug("[%s] Host '%s' did not match inclusion rule '%s'", type, name, test)
                      raise ZabbixException
              except ZabbixException:
                logging.debug("[%s] Host '%s' is not included anymore due to conditional filter", type, name)
                extra_hosts.add(vm)
                continue

              del params['include']

            # Check if the host should be skipped
            logging.debug("[%s] Checking exclusion rules for host '%s'", type, name)
            if params.has_key('exclude'):
              try:
                for test in params['exclude']:
                  if test['method'] != "vm.powerstate": # don't check for powered-off hosts
                    result = zg.get("%s[%s]" % (test['method'], vm))
                    reg = re.compile(".*%s.*" % test['pattern'], re.IGNORECASE)
                    if reg.match(result):
                      logging.debug("[%s] Host '%s' matched exclusion rule '%s'", type, name, test)
                      raise ZabbixException
              except ZabbixException:
                logging.debug("[%s] Host '%s' is now excluded due to conditional filter", type, name)
                extra_hosts.add(vm)
                continue

              del params['exclude']

        if not extra_hosts:
            logging.info("[%s] No extra host in Zabbix", type)
            return
        else:
          # Protection against accidental errors or bugs
          if (100 * len(extra_hosts)/len(zabbix_hosts)) > 10:
            logging.warning(
              "[%s] Anomaly detected. More than 10% extra hosts in Zabbix.", type
            )
            if self.force:
              logging.info(
                "[%s] Force option is enabled. The action [%s] will be applied.", type, self.action
              )
            else:
              logging.info(
                "[%s] Force option is disabled. Skipping.", type
              )
              return

        i = 0
        for host in extra_hosts:
          i = i + 1
          name = zabbix_hosts[host].encode('utf-8')
          logging.debug("[%s] Host '%s' [%s/%s] exists in Zabbix, type, but should be removed from monitoring", type, name, i , len(extra_hosts))
          if self.action == 'delete':
            hostid = self.get_hostid_by_name(host)
            logging.info(
              "[%s] Deleting host '%s' with hostid '%s'",
              type,
              name,
              hostid
            )
            result = self._call_zabbix_method(
              method='host.delete',
              params=[hostid]
            )
            self.removed_hosts.append(name)
          if self.action == 'disable':
            data   = self.get_host(host)
            hostid = data['hostid']
            status = data['status']

            if status == '0':
              logging.info(
                "[%s] Disabling host '%s' with hostid '%s'",
                type,
                name,
                hostid
              )
              result = self._call_zabbix_method(
                method='host.update',
                params=[{'hostid': hostid, 'status': 1}]
              )
              self.removed_hosts.append(name)
            else:
              logging.info(
                "[%s] Host '%s' with hostid '%s' is not enabled. Skipping.",
                type,
                name,
                hostid
              )


    def send_report(self):
        if self.options['import']['recipients'] and self.options['import']['sender'] and (len(self.added_hosts) + len(self.removed_hosts)) > 0:
          email = """From: Zabbix VSphere Import <""" + self.options['import']['sender'] + """>
X-Priority:2
Subject: Zabbix/vSphere hosts provisioning
"""      
          if len(self.added_hosts) > 0:
            email = email + """
The following hosts were ADDED in Zabbix :
"""
            email = email + ','.join(self.added_hosts) + "\r\n"
          
          if len(self.removed_hosts) > 0:
            if self.action == 'disable':
              email = email + """
The following hosts were DISABLED in Zabbix :
"""
            if self.action == 'delete':
              email = email + """
The following hosts were DELETED in Zabbix :
"""
            email = email + ','.join(self.removed_hosts) + "\r\n"
          try:
            smtpObj = smtplib.SMTP('localhost')
            smtpObj.sendmail(self.options['import']['sender'], self.options['import']['recipients'], email)
            logging.info("Successfully sent email.")
          except smtplib.SMTPException:
            logging.error("Error: unable to send email.")


def main():
    usage="""
Usage: vmbix-object-sync [-d] [-f] -c <config> [-a <delete|disable|simulate>]
       vmbix-object-sync -v
       vmbix-object-sync -h

Options:
  -h, --help                                         Display this usage info
  -v, --version                                      Display version and exit
  -d, --debug                                        Debug mode, be more verbose
  -f, --force                                        Force action even if an anomaly is detected
  -c <config>, --config <config>                     Configuration file to use
  -a <action>, --action <action>                     Action for extra hosts [default: simulate]

"""

    args = docopt(usage, version='0.1.0')

    # Silence the 'zabbix_api' module logger as it
    # can be quite noisy ...
    _logger = logging.getLogger('zabbix_api')
    _logger.setLevel(logging.ERROR)

    # Set our logging here
    if args['--debug']:
      level = logging.DEBUG
    else:
      level = logging.INFO

    logging.basicConfig(
        format='[%(asctime)s] - %(levelname)s - %(message)s',
        level=level
    )

    try:
        with open(args['--config'], 'r') as f:
            options = yaml.load(f)
    except Exception as e:
        logging.warning('Cannot load configuration file %s: %s', args['--config'], e)
        raise ZabbixException, 'Cannot load configuration file %s: %s' % (args['--config'], e)

    logging.info('Action for extra hosts : %s', args['--action'])

    zabbix = ZabbixConnector(options=options)
    zabbix.connect()

    zabbix.action = args['--action']
    zabbix.force = args['--force']
    zabbix.vsphere_hosts = {}
    zabbix.added_hosts = []
    zabbix.removed_hosts = []

    # Import vSphere objects into Zabbix
    zabbix.import_vsphere_hosts('vsphere_object_vm')
    zabbix.check_for_extra_hosts('vsphere_object_vm')
    zabbix.import_vsphere_hosts('vsphere_object_esx')
    zabbix.check_for_extra_hosts('vsphere_object_esx')
    zabbix.import_vsphere_hosts('vsphere_object_datastore')
    zabbix.check_for_extra_hosts('vsphere_object_datastore')
    zabbix.send_report()

    logging.info('Sync completed')

if __name__ == '__main__':
    main()
